16:34
## R code for FOR PROBA LEARNING TASK OBIWAN
# last modified on April 2020 by David MUNOZ TORD
#invisible(lapply(paste0('package:', names(sessionInfo()$otherPkgs)), detach, character.only=TRUE, unload=TRUE))
# PRELIMINARY STUFF ----------------------------------------
if(!require(pacman)) {
install.packages("pacman")
library(pacman)
}
pacman::p_load(tidyverse, plyr,dplyr,readr, car, BayesFactor, sjmisc, parallel, effectsize, pracma, hBayesDM) #whatchout to have tidyBF 0.3.0
options(mc.cores = parallel::detectCores()) #to mulithread
# SETUP ------------------------------------------------------------------
task = 'PBlearning'
# Set working directory #change here if the switchdrive is not on your home folder
analysis_path <- file.path('~/Desktop/SwitchDrive/OBIWAN/PROBA_LEARNING/Analysis')
setwd(analysis_path)
# open dataset
full <- read_csv("~/Desktop/SwitchDrive/OBIWAN/PROBA_LEARNING/PBLearning.csv")
#load("~/OBIWAN/DERIVATIVES/BEHAV/PBL_OBIWAN_T0.RData") # if you dont want ot recompute and go directly to stats
# Preprocess --------------------------------------------------------------
data  <- subset(full, Session == 1) #subset #only session one
data  <- subset(data, Phase == 'proc1') #only learning phase
#factorize and rename
data$type = as.factor(revalue(data$imcor, c(A="AB", C="CD", E="EF")))
data$reward = revalue(data$feedback, c(Negatif=0, Positif=1))
data$side = revalue(data$Stim.RESP, c(x='L', n='R'))
data$subjID = data$Subject
#This loop is there to transform everything into one column "choice"
#this column takes a 1 if the action was to choose either A, C or E
#and takes 0 if the response is either B, D or F (and that independently of the side)
data$choice = c(1:length(data$Trial)) #initialize variable
for (i in  1:length(data$Trial)) {
if((data$side[i] == 'L')&(data$img[i] == 'A' || data$img[i] == 'C' || data$img[i] == 'E')) {
data$choice[i] = 1
} else if ((data$side[1] == 'R')&(data$imd[i] == 'A' || data$imd[i] == 'C' || data$imd[i] == 'E')) {
data$choice[i] = 1}
else {
data$choice[i] = 0}
}
data$reward = as.numeric(data$reward)
data$type = revalue(data$type, c(AB=12, CD=34, EF=56))
data$type = as.numeric(as.character(data$type))
bs = ddply(data, .(Subject, imcor), summarise, acc = mean(Stim.ACC, na.rm = TRUE))
# Crtierium chose A at 65%, C at 60% and E at 50% and min 30 trials.
# bs_wide <- spread(bs, imcor, acc)
# bs_wide$pass = c(1:length(bs_wide$Subject)) #initialize variable
# for (i in  1:length(bs_wide$Subject)) {
#   if((bs_wide$A[i] >= 0.65) && (bs_wide$C[i] >=  0.60) && (bs_wide$E[i] >= 0.50 ))
#   {bs_wide$pass[i] = 1}
#   else {bs_wide$pass[i] = 0}
# }
#
# data = merge(data, bs_wide[ , c("Subject", "pass")], by = "Subject", all.x=TRUE)
# length(unique(data$Subject))
# data = subset(data, pass == 1)
# length(unique(data$Subject))
# count_trial = data %>% group_by(subjID) %>%tally()
# clean = filter(count_trial, n < 200)
dataclean <- select(data, c(subjID, type, choice, reward, Group))
# dataclean$group = ifelse(subjID > 199, 'obese', 'lean')
lean = subset(dataclean, Group == 'C')
obese = subset(dataclean, Group == 'O')
group1_1 = hBayesDM::pst_gainloss_Q(lean, niter=10000, nwarmup=2000, nchain=4, ncore=8)
plot(group1_1, type="trace", fontSize=11)
plot(group1_1)
rhat(group1_1)
plotInd(group1_1)
group2_1 = hBayesDM::pst_gainloss_Q(obese, niter=10000, nwarmup=2000, nchain=4, ncore=8)
plot(group2_1, type="trace", fontSize=11)
plot(group2_1)
rhat(group2_1)
plotInd(group2_1)
group1_2 = hBayesDM::pst_Q(lean, niter=10000, nwarmup=2000, nchain=4, ncore=8)
plot(group1_2, type="trace", fontSize=11)
plot(group1_2)
rhat(group1_2)
plotInd(group1_2)
group2_2 = hBayesDM::pst_Q(obese, niter=10000, nwarmup=2000, nchain=4, ncore=8)
plot(group2_2, type="trace", fontSize=11)
plot(group2_2)
rhat(group2_2)
plotInd(group2_2)
## After model fitting is complete for both groups,
## evaluate the group difference (e.g., on the 'pi' parameter) by examining the posterior distribution of group mean differences.
diffDist = group1$parVals$mu_beta - group2$parVals$mu_beta  # group1 - group2
HDIofMCMC( diffDist )  # Compute the 95% Highest Density Interval (HDI).
plotHDI( diffDist )    # plot the group mean differences
diffDist = group1$parVals$mu_beta - group2$parVals$mu_beta  # group1 - group2
HDIofMCMC( diffDist )  # Compute the 95% Highest Density Interval (HDI).
plotHDI( diffDist )    # plot the group mean differences
printFit(group1_1, group1_2)
printFit(group2_1, group2_2)
printFit(group1_1, group1_2, ic = both)
printFit(group1_1, group1_2, ic = "both")
printFit(group2_1, group2_2, ic = "both")
diffDist = group1_1$parVals$mu_beta - group2_1$parVals$mu_beta  # group1 - group2
HDIofMCMC(diffDist)  # Compute the 95% Highest Density Interval (HDI).
plotHDI(diffDist)    # plot the group mean differences
diffDist = group1_1$parVals$mu_alpha_pos - group2_1$parVals$mu_alpha_pos  # group1 - group2
HDIofMCMC(diffDist)  # Compute the 95% Highest Density Interval (HDI).
plotHDI(diffDist)    # plot the group mean differences
diffDist = group1_1$parVals$mu_alpha_neg - group2_1$parVals$mu_alpha_neg  # group1 - group2
HDIofMCMC(diffDist)  # Compute the 95% Highest Density Interval (HDI).
plotHDI(diffDist)    # plot the group mean differences
diffDist
BayesFactor::ttestBF(diffDist)
group1_1$allIndPars
group1_1$allIndPars$alpha_pos
x = group1_1$allIndPars$alpha_pos
x = grou2_1$allIndPars$alpha_pos
x = group2_1$allIndPars$alpha_pos
y = group1_1$allIndPars$alpha_pos
y
View(group2_2)
group1_1$allIndPars$subjID
group2_1$allIndPars$subjID
a = group2_1$allIndPars$alpha_pos
a
b = group1_1$allIndPars$alpha_pos
b
BayesFactor::ttestBF(a,b,paired = FALSE,posterior = T)
??BayesFactor::ttestBF
BayesFactor::ttestBF(a,b,paired = FALSE)
car::densityPlot(a)
car::densityPlot(b)
car::densityPlot(a)
car::densityPlot(b)
a_1 = 1/(1 + exp(-a))
b_1 = 1/(1 + exp(-b))
BayesFactor::ttestBF(a,b,paired = FALSE)
BayesFactor::ttestBF(a_1,b_1,paired = FALSE)
car::densityPlot(b_1)
car::densityPlot(a_1)
car::densityPlot(log(a))
car::densityPlot(log(b))
car::densityPlot(log(-b))
car::densityPlot(log(b))
car::densityPlot(b)
car::densityPlot(sqrt(b))
car::densityPlot(b)
library(tidybayes)
predict(group1_1$fit)
library(brms)
predict(group1_1$fit)
brms::predict(group1_1$fit)
predict_curve(group1_1$fit)
predicted_draws(group1_1$fit)
group1_1$fit
posterior <- as.matrix(group1_1$fit)
posterior
mcmc_areas(posterior,
prob = 0.8) + plot_title
library(rstanarm)
library(bayesplot)
mcmc_areas(posterior,
prob = 0.8) + plot_title
)
mcmc_areas(posterior,
prob = 0.8)
mcmc_areas(group1_1$parVals,
prob = 0.8)
mcmc_areas(as.matrix(group1_1$parVals),
prob = 0.8)
plotInd(group2_1)
plotInd(group2_1, pars = 3)
??plotInd
plotInd(group2_1, pars = c("beta"))
plotInd(group2_1, pars = c("mu_beta"))
plotInd(group2_1, pars = c("mu_beta", "mu_alpha_posd))
plotInd(group2_1, pars = c("mu_beta", "mu_alpha_pos))
plotInd(group2_1, pars = c("mu_beta", "mu_alpha_pos"))
plotInd(group2_1, pars = c("mu_alpha_pos"))
plotInd(group2_1, pars = c("mu_alpha_neg"))
plotInd(group2_1, pars = c("mu_alpha_pos","mu_alpha_neg"))
plotInd(group2_1, pars = c("mu_alpha_pos","mu_alpha_neg"),show_density = F)
x = plotInd(group2_1, pars = c("mu_alpha_pos","mu_alpha_neg"),show_density = F)
x$data
x$plot_env
group1_1$fit
plotInd(group2_1, pars = c("alpha"),show_density = F)
plotInd(group2_1, pars = c("alpha_pos"),show_density = F)
plotInd(group1_1, pars = c("alpha_pos"),show_density = F)
plotInd(group1_1, pars = c("alpha_pos", "mu_alpha_pos"),show_density = F)
plotInd(group1_1, pars = c("alpha_pos", "mu_alpha_pos"),show_density = T)
library(ggpubr)
x = plotInd(group2_1, pars = c("mu_beta")); y = plotInd(group2_1, pars = c("beta"))
ggarrange(x, y, dens, ncol = 2)
ggarrange(x, y, ncol = 2)
x = plotInd(group2_1, pars = c("beta")); y = plotInd(group2_1, pars = c("mu_beta"))
ggarrange(x, y, ncol = 2)
plotInd(group2_1, pars = c("beta"), color="blue")
x$mapping
x$theme
x$theme$x
x +   scale_fill_manual(name = "",  values=c("1" = pal[2],"-1"=pal[1]))
x +   scale_fill_manual(name = "",  values=c("1" ="blue")
)
x + scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9"))
x + scale_fill_conitnous(values=c("#999999", "#E69F00", "#56B4E9"))
x + scale_fill_continuous(values=c("#999999", "#E69F00", "#56B4E9"))
x
x + scale_fill_grey()
x + scale_color_grey(start=0.8, end=0.2)
x + scale_fill_grey(start=0.8, end=0.2)
x$layers
x$layers
x$mapping
x$theme
